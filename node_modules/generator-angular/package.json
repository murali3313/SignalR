{
  "name": "generator-angular",
  "version": "0.8.0",
  "description": "Yeoman generator for AngularJS",
  "keywords": [
    "yeoman-generator",
    "scaffold",
    "framework",
    "component",
    "front-end",
    "app",
    "angular"
  ],
  "author": {
    "name": "The Yeoman Team"
  },
  "main": "app/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/yeoman/generator-angular"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "chalk": "~0.4.0",
    "wiredep": "~1.0.0",
    "yeoman-generator": "~0.16.0"
  },
  "peerDependencies": {
    "generator-karma": ">=0.6.0",
    "yo": ">=1.0.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-conventional-changelog": "~1.1.0",
    "grunt-release": "~0.6.0",
    "load-grunt-tasks": "~0.3.0",
    "marked": "~0.2.8",
    "mocha": "*",
    "semver": "~2.2.1",
    "underscore.string": "~2.3.1"
  },
  "engines": {
    "node": ">=0.10.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "readme": "# AngularJS generator [![Build Status](https://secure.travis-ci.org/yeoman/generator-angular.png?branch=master)](http://travis-ci.org/yeoman/generator-angular) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\r\n\r\n> Yeoman generator for AngularJS - lets you quickly set up a project with sensible defaults and best practises.\r\n\r\n\r\n## Usage\r\n\r\nInstall `generator-angular`:\r\n```\r\nnpm install -g generator-angular\r\n```\r\n\r\nMake a new directory, and `cd` into it:\r\n```\r\nmkdir my-new-project && cd $_\r\n```\r\n\r\nRun `yo angular`, optionally passing an app name:\r\n```\r\nyo angular [app-name]\r\n```\r\n\r\nRun `grunt` for building and `grunt serve` for preview\r\n\r\n\r\n## Generators\r\n\r\nAvailable generators:\r\n\r\n* [angular](#app) (aka [angular:app](#app))\r\n* [angular:controller](#controller)\r\n* [angular:directive](#directive)\r\n* [angular:filter](#filter)\r\n* [angular:route](#route)\r\n* [angular:service](#service)\r\n* [angular:provider](#service)\r\n* [angular:factory](#service)\r\n* [angular:value](#service)\r\n* [angular:constant](#service)\r\n* [angular:decorator](#decorator)\r\n* [angular:view](#view)\r\n\r\n**Note: Generators are to be run from the root directory of your app.**\r\n\r\n### App\r\nSets up a new AngularJS app, generating all the boilerplate you need to get started. The app generator also optionally installs Bootstrap and additional AngularJS modules, such as angular-resource (installed by default).\r\n\r\nExample:\r\n```bash\r\nyo angular\r\n```\r\n\r\n### Route\r\nGenerates a controller and view, and configures a route in `app/scripts/app.js` connecting them.\r\n\r\nExample:\r\n```bash\r\nyo angular:route myroute\r\n```\r\n\r\nProduces `app/scripts/controllers/myroute.js`:\r\n```javascript\r\nangular.module('myMod').controller('MyrouteCtrl', function ($scope) {\r\n  // ...\r\n});\r\n```\r\n\r\nProduces `app/views/myroute.html`:\r\n```html\r\n<p>This is the myroute view</p>\r\n```\r\n\r\n### Controller\r\nGenerates a controller in `app/scripts/controllers`.\r\n\r\nExample:\r\n```bash\r\nyo angular:controller user\r\n```\r\n\r\nProduces `app/scripts/controllers/user.js`:\r\n```javascript\r\nangular.module('myMod').controller('UserCtrl', function ($scope) {\r\n  // ...\r\n});\r\n```\r\n### Directive\r\nGenerates a directive in `app/scripts/directives`.\r\n\r\nExample:\r\n```bash\r\nyo angular:directive myDirective\r\n```\r\n\r\nProduces `app/scripts/directives/myDirective.js`:\r\n```javascript\r\nangular.module('myMod').directive('myDirective', function () {\r\n  return {\r\n    template: '<div></div>',\r\n    restrict: 'E',\r\n    link: function postLink(scope, element, attrs) {\r\n      element.text('this is the myDirective directive');\r\n    }\r\n  };\r\n});\r\n```\r\n\r\n### Filter\r\nGenerates a filter in `app/scripts/filters`.\r\n\r\nExample:\r\n```bash\r\nyo angular:filter myFilter\r\n```\r\n\r\nProduces `app/scripts/filters/myFilter.js`:\r\n```javascript\r\nangular.module('myMod').filter('myFilter', function () {\r\n  return function (input) {\r\n    return 'myFilter filter:' + input;\r\n  };\r\n});\r\n```\r\n\r\n### View\r\nGenerates an HTML view file in `app/views`.\r\n\r\nExample:\r\n```bash\r\nyo angular:view user\r\n```\r\n\r\nProduces `app/views/user.html`:\r\n```html\r\n<p>This is the user view</p>\r\n```\r\n\r\n### Service\r\nGenerates an AngularJS service.\r\n\r\nExample:\r\n```bash\r\nyo angular:service myService\r\n```\r\n\r\nProduces `app/scripts/services/myService.js`:\r\n```javascript\r\nangular.module('myMod').service('myService', function () {\r\n  // ...\r\n});\r\n```\r\n\r\nYou can also do `yo angular:factory`, `yo angular:provider`, `yo angular:value`, and `yo angular:constant` for other types of services.\r\n\r\n### Decorator\r\nGenerates an AngularJS service decorator.\r\n\r\nExample:\r\n```bash\r\nyo angular:decorator serviceName\r\n```\r\n\r\nProduces `app/scripts/decorators/serviceNameDecorator.js`:\r\n```javascript\r\nangular.module('myMod').config(function ($provide) {\r\n    $provide.decorator('serviceName', function ($delegate) {\r\n      // ...\r\n      return $delegate;\r\n    });\r\n  });\r\n```\r\n\r\n## Options\r\nIn general, these options can be applied to any generator, though they only affect generators that produce scripts.\r\n\r\n### CoffeeScript\r\nFor generators that output scripts, the `--coffee` option will output CoffeeScript instead of JavaScript.\r\n\r\nFor example:\r\n```bash\r\nyo angular:controller user --coffee\r\n```\r\n\r\nProduces `app/scripts/controller/user.coffee`:\r\n```coffeescript\r\nangular.module('myMod')\r\n  .controller 'UserCtrl', ($scope) ->\r\n```\r\n\r\nA project can mix CoffeScript and JavaScript files.\r\n\r\nTo output JavaScript files, even if CoffeeScript files exist (the default is to output CoffeeScript files if the generator finds any in the project), use `--coffee=false`.\r\n\r\n### Minification Safe\r\n\r\n**Removed**\r\n\r\n[Related Issue #452](https://github.com/yeoman/generator-angular/issues/452): This option has been removed from the generator. Initially it was needed as ngMin was not entirely stable. As it has matured, the need to keep separate versions of the script templates has led to extra complexity and maintenance of the generator. By removing these extra burdens, new features and bug fixes should be easier to implement. If you are dependent on this option, please take a look at ngMin and seriously consider implementing it in your own code. It will help reduce the amount of typing you have to do (and look through) as well as make your code cleaner to look at.\r\n\r\nBy default, generators produce unannotated code. Without annotations, AngularJS's DI system will break when minified. Typically, these annotations that make minification safe are added automatically at build-time, after application files are concatenated, but before they are minified. The annotations are important because minified code will rename variables, making it impossible for AngularJS to infer module names based solely on function parameters.\r\n\r\nThe recommended build process uses `ngmin`, a tool that automatically adds these annotations. However, if you'd rather not use `ngmin`, you have to add these annotations manually yourself. **One thing to note is that `ngmin` does not produce minsafe code for things that are not main level elements like controller, services, providers, etc.:\r\n\r\n```javascript\r\nresolve: {\r\n  User: function(myService) {\r\n    return MyService();\r\n  }\r\n}\r\n```\r\n\r\nwill need to be manually done like so:\r\n```javascript\r\nresolve: {\r\n  User: ['myService', function(myService) {\r\n    return MyService();\r\n  }]\r\n}\r\n```\r\n\r\n\r\n### Add to Index\r\nBy default, new scripts are added to the index.html file. However, this may not always be suitable. Some use cases:\r\n\r\n* Manually added to the file\r\n* Auto-added by a 3rd party plugin\r\n* Using this generator as a subgenerator\r\n\r\nTo skip adding them to the index, pass in the skip-add argument:\r\n```bash\r\nyo angular:service serviceName --skip-add\r\n```\r\n\r\n## Bower Components\r\n\r\nThe following packages are always installed by the [app](#app) generator:\r\n\r\n* angular\r\n* angular-mocks\r\n* angular-scenario\r\n\r\n\r\nThe following additional modules are available as components on bower, and installable via `bower install`:\r\n\r\n* angular-cookies\r\n* angular-loader\r\n* angular-resource\r\n* angular-sanitize\r\n\r\nAll of these can be updated with `bower update` as new versions of AngularJS are released.\r\n\r\n## Configuration\r\nYeoman generated projects can be further tweaked according to your needs by modifying project files appropriately.\r\n\r\n### Output\r\nYou can change the `app` directory by adding a `appPath` property to `bower.json`. For instance, if you wanted to easily integrate with Express.js, you could add the following:\r\n\r\n```json\r\n{\r\n  \"name\": \"yo-test\",\r\n  \"version\": \"0.0.0\",\r\n  ...\r\n  \"appPath\": \"public\"\r\n}\r\n\r\n```\r\nThis will cause Yeoman-generated client-side files to be placed in `public`.\r\n\r\n## Testing\r\n\r\nRunning `grunt test` will run the unit tests with karma.\r\n\r\n## Contribute\r\n\r\nSee the [contributing docs](https://github.com/yeoman/yeoman/blob/master/contributing.md)\r\n\r\nWhen submitting an issue, please follow the [guidelines](https://github.com/yeoman/yeoman/blob/master/contributing.md#issue-submission). Especially important is to make sure Yeoman is up-to-date, and providing the command or commands that cause the issue.\r\n\r\nWhen submitting a PR, make sure that the commit messages match the [AngularJS conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/).\r\n\r\nWhen submitting a bugfix, write a test that exposes the bug and fails before applying your fix. Submit the test alongside the fix.\r\n\r\nWhen submitting a new feature, add tests that cover the feature.\r\n\r\n## License\r\n\r\n[BSD license](http://opensource.org/licenses/bsd-license.php)\r\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/yeoman/generator-angular/issues"
  },
  "homepage": "https://github.com/yeoman/generator-angular",
  "_id": "generator-angular@0.8.0",
  "dist": {
    "shasum": "06d1dc5fd6514e27dcc98487bd5cd0da01e7fcc9"
  },
  "_from": "generator-angular"
}
